// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package image_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageGrayscaleServiceClient is the client API for ImageGrayscaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageGrayscaleServiceClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageGrayscaleService_UploadImageClient, error)
}

type imageGrayscaleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageGrayscaleServiceClient(cc grpc.ClientConnInterface) ImageGrayscaleServiceClient {
	return &imageGrayscaleServiceClient{cc}
}

func (c *imageGrayscaleServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageGrayscaleService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageGrayscaleService_ServiceDesc.Streams[0], "/ImageGrayscaleService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageGrayscaleServiceUploadImageClient{stream}
	return x, nil
}

type ImageGrayscaleService_UploadImageClient interface {
	Send(*ImageRequest) error
	Recv() (*ProgressResponse, error)
	grpc.ClientStream
}

type imageGrayscaleServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *imageGrayscaleServiceUploadImageClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageGrayscaleServiceUploadImageClient) Recv() (*ProgressResponse, error) {
	m := new(ProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageGrayscaleServiceServer is the server API for ImageGrayscaleService service.
// All implementations must embed UnimplementedImageGrayscaleServiceServer
// for forward compatibility
type ImageGrayscaleServiceServer interface {
	UploadImage(ImageGrayscaleService_UploadImageServer) error
	mustEmbedUnimplementedImageGrayscaleServiceServer()
}

// UnimplementedImageGrayscaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageGrayscaleServiceServer struct {
}

func (UnimplementedImageGrayscaleServiceServer) UploadImage(ImageGrayscaleService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageGrayscaleServiceServer) mustEmbedUnimplementedImageGrayscaleServiceServer() {}

// UnsafeImageGrayscaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageGrayscaleServiceServer will
// result in compilation errors.
type UnsafeImageGrayscaleServiceServer interface {
	mustEmbedUnimplementedImageGrayscaleServiceServer()
}

func RegisterImageGrayscaleServiceServer(s grpc.ServiceRegistrar, srv ImageGrayscaleServiceServer) {
	s.RegisterService(&ImageGrayscaleService_ServiceDesc, srv)
}

func _ImageGrayscaleService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageGrayscaleServiceServer).UploadImage(&imageGrayscaleServiceUploadImageServer{stream})
}

type ImageGrayscaleService_UploadImageServer interface {
	Send(*ProgressResponse) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type imageGrayscaleServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *imageGrayscaleServiceUploadImageServer) Send(m *ProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageGrayscaleServiceUploadImageServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageGrayscaleService_ServiceDesc is the grpc.ServiceDesc for ImageGrayscaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageGrayscaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImageGrayscaleService",
	HandlerType: (*ImageGrayscaleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImageGrayscaleService_UploadImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "image_service.proto",
}
